apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'dagger.hilt.android.plugin'

def keyPropertiesFile = rootProject.file("keys.properties");
def keyProperties = new Properties()
keyProperties.load(new FileInputStream(keyPropertiesFile))

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    defaultConfig {
        applicationId "com.gondev.searchimage"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        buildConfigField "String", "apikey", keyProperties['api_key']
        buildConfigField "String", "base_url", "\"https://dapi.kakao.com/\""

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    buildFeatures {
        dataBinding = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation 'androidx.core:core-ktx:1.3.1'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.fragment:fragment-ktx:1.2.5'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.1'
    implementation 'com.google.android.material:material:1.2.1'
    testImplementation 'junit:junit:4.13'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    // Android Architecture components
    // https://developer.android.com/jetpack/androidx/releases/lifecycle
    // 안드로이드 ViewModel을 지원하고 라이프사이클에 맞게 제어 하는 역할을 합니다
    def lifecycle_version = "2.2.0"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"

    // dagger-hilt
    // https://developer.android.com/training/dependency-injection/hilt-android
    // 의존성주입(Dependency Injection) 라이브러리입니다
    // 클레스에서 사용하는 인스턴스를 외부에서 주입 받아
    // 클레스간 의존성을 줄이고 테스트를 용의하게 해줍니다
    // Dagger는 컴파일 단계에서 의존성을 주입해 주는 강력한
    // 라이브러리이지만 사용법이 간단하지 않아 제대로 사용
    // 하려면 많은 학습이 필요합니다
    // hilt는 dagger의 많은 부분을 ViewModel에 맞게 재조정하여
    // 쉽고 간편하게 사용할 수 있는 장점이 있습니다
    // 따라서 이번 프로젝트에서는 hilt를 사용하여 의존성 주입을
    // 해보겠습니다
    // 참고: Hilt와 데이터 바인딩을 모두 사용하는 프로젝트에는
    // Android 스튜디오 4.0 이상이 필요합니다.
    def hiltVersion = '2.28.3-alpha'
    implementation "com.google.dagger:hilt-android:$hiltVersion"
    kapt "com.google.dagger:hilt-android-compiler:$hiltVersion"
    implementation 'androidx.hilt:hilt-lifecycle-viewmodel:1.0.0-alpha02'
    kapt 'androidx.hilt:hilt-compiler:1.0.0-alpha02'
    /*androidTestImplementation "com.google.dagger:hilt-android-testing:$hiltVersion"
    kaptTest "com.google.dagger:hilt-android-compiler:$hiltVersion"*/

    // retrofit
    // https://square.github.io/retrofit/
    // httpClient rapper library
    // http 프로토콜을 통해서 WAS에 접근하는 라이브러리입니다
    // Rest API 메소드를 제공할 뿐만 아니라
    // Gson과 연계해서 파싱지원을 하는 등 강력하고 유연한
    // API 콜을 제공합니다
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.squareup.okhttp3:okhttp:4.8.1'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.8.1'

    // room
    // https://developer.android.com/topic/libraries/architecture/room
    // SQLite 기반의 데이터 영속화 라이브러리입니다
    // 네트워크 데이터를 DB에 저장하고 케쉬 처럼 읽고 쓸 수 있습니다
    // 네트워크 통신전에 DB에 데이터가 있으면, 이 데이터로 화면을
    // 구성하고 네트워크 데이터로 수정합니다
    // 이렇게 하면 화면 반응성이 빨라집니다
    def room_version = '2.2.5'
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    androidTestImplementation "androidx.room:room-testing:$room_version"

    // paging
    // https://developer.android.com/topic/libraries/architecture/paging?hl=ko
    // 페이징 기능을 지원 하기 위한 라이브러리입니다
    implementation "androidx.paging:paging-runtime-ktx:2.1.2"

    // timber
    // https://github.com/JakeWharton/timber
    // 로그 라이브러리입니다
    implementation 'com.jakewharton.timber:timber:4.7.1'

    // glide
    // https://bumptech.github.io/glide/
    // 이미지 로드 라이브러리
    def GLIDE_VERSION = "4.11.0"
    implementation "com.github.bumptech.glide:glide:${GLIDE_VERSION}"
    annotationProcessor "com.github.bumptech.glide:compiler:${GLIDE_VERSION}"
    implementation "com.github.bumptech.glide:okhttp3-integration:4.11.0"
}